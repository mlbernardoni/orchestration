<!DOCTYPE html>
<html>
<head>
<meta charset="ISO-8859-1">
<link rel = "stylesheet" href="style.css">
<title>R2 Dashboard</title>
</head>
<body>
  <header>
    <h1>R2 Display</h1>
  </header>
 <h2>Service Tree</h2>
 <h3>Select Service</h3>
 
 
 <ul id="cl1" class="collapsibleList">
 </ul>
  
  <br>
<p id="p1">SelectNode</p>

  <script "type="text/javascript">

  const jsontreestr = <%- JSON.stringify(jsontree) %>;
  //const jsontreestr = <%- jsontree %>;
  
  
 
  window.addEventListener('load', (event) => {
   console.log(jsontreestr);
 	let ul = document.getElementById('cl1');
	addsublist(ul, jsontreestr);
	
   CollapsibleLists.apply();
   console.log('The page has fully loaded');
});
 
	
function addsublist( ele,  row){
	    let jsontext = row["children"].length + " <b>Status:</b> " + JSON.stringify(row["record"]["status"]) + "  <b>Type:</b> " + JSON.stringify(row["record"]["servicetype"]) + "  <b>URL:</b> " + JSON.stringify(row["record"]["service_url"]);
	    let jsondata = JSON.stringify(row["record"]["service"]);
	    jsontext = jsontext.replaceAll('"', '');
	    jsondata = jsondata.replaceAll('"', '');
	    let li = document.createElement('li');
		li.setAttribute('data-value', jsondata);
	    ele.appendChild(li);
	    let span = document.createElement('span');
	    li.appendChild(span);
	    span.innerHTML += jsontext;
	    let newobj = row["children"];
	    if (newobj.length > 0)
	    {
	        let ul = document.createElement('ul');
	        li.appendChild(ul);
	        for ( let i = 0; i < newobj.length; i++)
	        {
   				console.log(newobj[i]);
	            addsublist(ul, newobj[i]);
	        }
	    }
	}
 

   
const CollapsibleLists = (function(){

  // Makes all lists with the class 'collapsibleList' collapsible. The
  // parameter is:
  //
  // doNotRecurse - true if sub-lists should not be made collapsible
  var myele = null;
  function apply(doNotRecurse){

    [].forEach.call(document.getElementsByTagName('ul'), node => {

      if (node.classList.contains('collapsibleList')){

        applyTo(node, true);

        if (!doNotRecurse){

          [].forEach.call(node.getElementsByTagName('ul'), subnode => {
            subnode.classList.add('collapsibleList')
          });

        }

      }

    })

  }

 

  // Makes the specified list collapsible. The parameters are:
  //
  // node         - the list element
  // doNotRecurse - true if sub-lists should not be made collapsible
  function applyTo(node, doNotRecurse){

    [].forEach.call(node.getElementsByTagName('li'), li => {

      if (!doNotRecurse || node === li.parentNode){

        li.style.userSelect       = 'none';
        li.style.MozUserSelect    = 'none';
        li.style.msUserSelect     = 'none';
        li.style.WebkitUserSelect = 'none';

        li.addEventListener('click', handleClick.bind(null, li));

        toggle(li);

      }

    });

  }

  // Handles a click. The parameter is:
  //
  // node - the node for which clicks are being handled
  function handleClick(node, e){

    let li = e.target;
    
//document.getElementById("p1").innerHTML = li.innerHTML; //innerText textContent
//document.getElementById("p1").innerHTML = li.childNodes[0].textContent ;

//li.style.backgroundColor = "lightblue";

    while (li.nodeName !== 'LI'){
      li = li.parentNode;
    }

    if (li === node) {
      toggle(node);
    
    	if (myele != li.querySelector("span"))
    	{
		    document.getElementById("p1").innerHTML = li.getAttribute('data-value');
	    	if (myele != null)
			    myele.style.backgroundColor = "#F0FFFF";
		    myele = li.querySelector("span");
		    myele.style.backgroundColor  = "#ADD8E6";
		}
    }
  }

  // Opens or closes the unordered list elements directly within the
  // specified node. The parameter is:
  //
  // node - the node containing the unordered list elements
  function toggle(node){


    const open = node.classList.contains('collapsibleListClosed');
    const uls  = node.getElementsByTagName('ul');
   console.log(node);

    [].forEach.call(uls, ul => {

       let li = ul;
      while (li.nodeName !== 'LI'){
        li = li.parentNode;
      }

      if (li === node){
        ul.style.display = (open ? 'block' : 'none');
      }

    });

    node.classList.remove('collapsibleListOpen');
    node.classList.remove('collapsibleListClosed');

    if (uls.length > 0){
      node.classList.add('collapsibleList' + (open ? 'Open' : 'Closed'));
    }

  }

  return {apply, applyTo};

})();

</script>
</body>
</html>